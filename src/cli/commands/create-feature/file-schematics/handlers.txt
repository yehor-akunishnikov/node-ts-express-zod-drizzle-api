import {Request, Response, NextFunction} from "express";

import {applyRequestDTO} from "@common/middlewares";
import {transformOutput} from "@common/transformers";

import * as %fName%Service from "./%fName%.service";
import {
  %fNameU%IdUrlParamDTO,
  %fName%IdUrlParamDTO,
  %fName%OutputDTO,
  %fName%SearchQueryDTO,
  %fNameU%SearchQueryDTO,
  %fNameU%OutputDTO
} from "./%fName%.schema";

export const getAll = [
  applyRequestDTO(%fName%SearchQueryDTO, "query"),
  async (
    req: Request<unknown, unknown, unknown, %fNameU%SearchQueryDTO>,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const %fName%s = await %fName%Service.findMany(req.query);

      res.json(transformOutput<%fNameU%OutputDTO[]>(%fName%OutputDTO, %fName%s));
    } catch (e) {
      next(e);
    }
  }
];

export const getById = [
  applyRequestDTO(%fName%IdUrlParamDTO, "params"),
  async (
    req: Request<%fNameU%IdUrlParamDTO>,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const %fName% = await %fName%Service.findOne({id: req.params.id});

      res.json(transformOutput<%fNameU%OutputDTO>(%fName%OutputDTO, %fName%));
    } catch (e) {
      next(e);
    }
  }
];
